# -*- coding: utf-8 -*-
"""CODSOFT - 4 ( Sales Prediction )

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LjS7qiAVYNxwJ_JDm4Q7RPunQaKlnqzw

# **Sales Prediction**

### **This completes the full implementation of the Data Science project for Sales Prediction.**

## **Importing Libraries**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import seaborn as sns
import matplotlib.pyplot as plt

"""## **Data Preprocessing**  

"""

# Load the dataset
df = pd.read_csv('advertising.csv')

# Display the first 5 rows and a summary of the data
print("First 5 rows of the dataset:")
print(df.head().to_markdown(index=False, numalign="left", stralign="left"))
print("\n")
print("Data information:")
print(df.info())

"""The project began by loading the advertising.csv dataset, which contains advertising expenditures on TV, radio, and newspapers, along with corresponding sales figures. The data was found to be clean and complete, with no missing values.

## **Exploratory Data Analysis (EDA)**
"""

# Pairplot to visualize the relationships between features and sales
sns.pairplot(df, x_vars=['TV', 'Radio', 'Newspaper'], y_vars='Sales', height=5, aspect=0.8)
plt.suptitle('Pairplot of Advertising Expenditure vs Sales', y=1.02)
plt.savefig('advertising_pairplot.png')
plt.show()

"""**Data Visualization:**

 An exploratory data analysis was conducted using a pairplot to visualize the relationship between advertising spending on each platform and sales. The plots show a strong positive correlation between TV and radio advertising and sales. The relationship with newspaper advertising appears to be weaker

## **Model Building**
"""

# Prepare data for modeling
X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the LinearRegression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

"""**Model Selection:** A LinearRegression model was chosen for this regression task. This is a suitable baseline model for understanding the linear relationships between the features and the target variable.

**Data Splitting:** The dataset was split into training and testing sets to ensure the model's performance could be evaluated on unseen data.

**Training and Prediction:** The model was trained on the training data and then used to predict sales on the test set.

## **Evaluation**
"""

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R²): {r2:.2f}")

"""The model's performance was evaluated using the following regression metrics:

**Mean Absolute Error (MAE):** 1.27

**Mean Squared Error (MSE):** 2.91

**R-squared (R²):** 0.91

The MAE of 1.27 indicates that, on average, the model's predictions are off by approximately 1.27 units of sales. The R-squared value of 0.91 is excellent, suggesting that approximately 91% of the variance in sales can be explained by the advertising expenditure on TV, radio, and newspapers. This indicates that the model is highly effective at predicting sales based on the given features.
"""