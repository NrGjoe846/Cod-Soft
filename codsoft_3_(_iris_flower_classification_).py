# -*- coding: utf-8 -*-
"""CODSOFT - 3 ( Iris Flower Classification )

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zl2AwXRJ70pCpkjKUXR_FXhhuiTtVw4Y

# **Iris Flower Classification**

#### **This project details a complete data science workflow for the Iris Flower Classification task. The objective is to train a machine learning model to accurately classify Iris flowers into one of three species: setosa, versicolor, or virginica, based on their sepal and petal measurements.**

## **Importing Libraries**
"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

"""## **Data Preprocessing**

The project began by loading the IRIS.csv dataset, which contained measurements of sepal and petal for the three species of Iris flowers. The data was found to be clean and complete, with no missing values.

  Data Transformation: The categorical species column was encoded into numerical values (0, 1, 2) to prepare the data for the machine learning model.

## **Exploratory Data Analysis (EDA)**

**Data Visualization:**

 An exploratory data analysis was conducted, using a pairplot to visualize the relationships between the features (sepal_length, sepal_width, petal_length, petal_width). This visualization showed clear separation between the species, indicating that a classification model would be highly effective.
"""

# Load the dataset
df = pd.read_csv('IRIS.csv')

# Display the first 5 rows and a summary of the data
print("First 5 rows of the dataset:")
print(df.head().to_markdown(index=False, numalign="left", stralign="left"))
print("\n")
print("Data information:")
print(df.info())

"""### **Model Building**
**Data Splitting:** The dataset was partitioned into training and testing sets to evaluate the model's performance on unseen data.

**Model Selection:** A RandomForestClassifier was chosen as the machine learning model due to its robustness and effectiveness for classification tasks.

**Training and Prediction:** The model was trained on the training set and then used to predict the species of the flowers in the test set.


"""

# Data Preprocessing and EDA

# Encode the 'species' column to numerical format
le = LabelEncoder()
df['species_encoded'] = le.fit_transform(df['species'])

# Drop the original 'species' column
df.drop('species', axis=1, inplace=True)

# Display the first 5 rows of the preprocessed data
print("First 5 rows of the preprocessed dataset:")
print(df.head().to_markdown(index=False, numalign="left", stralign="left"))

# Pairplot to visualize the data
sns.pairplot(df, hue='species_encoded', palette='tab10', diag_kind='kde')
plt.suptitle('Pairplot of Iris Dataset by Species', y=1.02)
plt.savefig('iris_pairplot.png')
plt.show()

# Prepare data for modeling
X = df.drop('species_encoded', axis=1)
y = df['species_encoded']

""" #### **The model's performance was evaluated with the following results:**

**Accuracy:** The model achieved an outstanding accuracy of 100%, correctly classifying all flowers in the test set.

**Detailed Metrics:** The classification report showed perfect precision, recall, and F1-score (1.00 for all three metrics across all three species), demonstrating flawless classification.

**Confusion Matrix:** The confusion matrix confirmed the perfect performance, with all predictions aligning with the actual species, indicating no false positives or false negatives.

This project successfully demonstrates the process of building, training, and evaluating a machine learning model for a classic classification problem.
"""

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the RandomForestClassifier model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

# Plot the confusion matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=['Setosa', 'Versicolor', 'Virginica'], yticklabels=['Setosa', 'Versicolor', 'Virginica'])
plt.xlabel('Predicted Species')
plt.ylabel('Actual Species')
plt.title('Confusion Matrix')
plt.savefig('iris_confusion_matrix.png')
plt.show()