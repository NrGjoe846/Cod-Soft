# -*- coding: utf-8 -*-
"""CODSOFT - 2 ( Movie Rating Prediction )

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A4fqv-SShSQt6Pkk4JDuS-4PbrtFiPbp

# **Movie Rating Prediction**

## **Importing Libraries**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

""" ## **Data Preprocessing and Feature Engineering**

"""

# Load the dataset
df = pd.read_csv('IMDb Movies India.csv', encoding='latin-1')

# Display the first 5 rows and a summary of the data
print("First 5 rows of the dataset:")
print(df.head().to_markdown(index=False, numalign="left", stralign="left"))
print("\n")
print("Data information:")
print(df.info())

"""The project started with loading the IMDb Movies India.csv dataset. The initial data inspection revealed significant missing values and incorrect data types. To prepare the data for modeling, the following steps were taken:


* Rows with missing Rating values were dropped, as this is the target variable.

* Other columns, such as Year, Duration, and Votes, were cleaned to remove non-numeric characters and then converted to integer types.

* Missing values in Genre, Director, and the Actor columns were filled with placeholders like 'unknown'.

* A new Actors feature was created by combining the three actor columns.

* The Name column and individual Actor columns were dropped.

* The Genre column was simplified by using only the first listed genre for each movie.

## **Exploratory Data Analysis (EDA)**

 A distribution plot of the movie ratings was created to visualize the target variable. The plot shows that most movies in the dataset have a rating between 4.0 and 7.0.
"""

# Drop rows with missing 'Rating' as it's our target variable
df.dropna(subset=['Rating'], inplace=True)

# Handle other missing values
df['Year'].fillna('unknown', inplace=True)
df['Duration'].fillna('0 min', inplace=True)
df['Genre'].fillna('unknown', inplace=True)
df['Votes'].fillna('0', inplace=True)
df['Director'].fillna('unknown', inplace=True)
df['Actor 1'].fillna('unknown', inplace=True)
df['Actor 2'].fillna('unknown', inplace=True)
df['Actor 3'].fillna('unknown', inplace=True)

# Data Cleaning and Type Conversion
# Clean and convert 'Year' column
df['Year'] = df['Year'].str.extract(r'(\d{4})').astype(float).astype('Int64')

# Clean and convert 'Duration' column
df['Duration'] = df['Duration'].str.replace(' min', '').astype(float).astype('Int64')

# Clean and convert 'Votes' column
df['Votes'] = df['Votes'].str.replace(',', '').astype(int)

# Feature Engineering
# For 'Genre', let's use the first genre listed
df['Genre'] = df['Genre'].apply(lambda x: x.split(',')[0].strip())

# Combine actor columns into a single feature
df['Actors'] = df['Actor 1'] + ', ' + df['Actor 2'] + ', ' + df['Actor 3']
df.drop(['Actor 1', 'Actor 2', 'Actor 3'], axis=1, inplace=True)

# Drop 'Name' as it is not needed for the model
df.drop('Name', axis=1, inplace=True)

# Display the cleaned and processed DataFrame
print("Cleaned and processed DataFrame information:")
print(df.info())
print("\nFirst 5 rows of the cleaned dataset:")
print(df.head().to_markdown(index=False, numalign="left", stralign="left"))

# Prepare data for modeling
X = df.drop('Rating', axis=1)
y = df['Rating']

# Save the preprocessed data to a CSV file for user to download
df.to_csv("IMDb_movies_preprocessed.csv", index=False)

"""## **Model Building and Evaluation**

** The cleaned data was prepared for a machine learning model.**

* Categorical features Director and Actors were encoded using LabelEncoder due to their high cardinality. The Genre column was one-hot encoded.

* The data was then split into training and testing sets.

* A RandomForestRegressor model was trained on the training data.

*  model's performance on the test set was evaluated using the following regression metrics:

 1. Mean Absolute Error (MAE): 0.83

 2. Mean Squared Error (MSE): 1.23

 3. R-squared (R²): 0.3                       4

"""

# Perform Exploratory Data Analysis (EDA)
# Plot the distribution of ratings
plt.figure(figsize=(10, 6))
sns.histplot(df['Rating'], bins=20, kde=True, color='blue')
plt.title('Distribution of Movie Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.savefig('rating_distribution.png')
plt.show()

# Drop rows with any remaining missing values before encoding
df.dropna(inplace=True)

# Feature Encoding
# Label encode high-cardinality categorical features
le = LabelEncoder()
df['Director_encoded'] = le.fit_transform(df['Director'])
df['Actors_encoded'] = le.fit_transform(df['Actors'])
df.drop(['Director', 'Actors'], axis=1, inplace=True)

# One-hot encode the Genre column
df = pd.get_dummies(df, columns=['Genre'], drop_first=True)

# Define features (X) and target (y)
X = df.drop('Rating', axis=1)
y = df['Rating']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the RandomForestRegressor model
model = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"R-squared (R²): {r2:.2f}")